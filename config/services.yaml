# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/App'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/App/Controller/'
        autowire: true
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\ExchangeRate\UsedCurrenciesProvider:
        arguments:
            $usedCurrencies: ['USD', 'EUR', 'CZK', 'IDR', 'BRL']

    app.exchangeRate.trade.strategies.defaultBuying:
        class: App\ExchangeRate\Trade\Strategies\DefaultBuyingStrategy

    app.exchangeRate.trade.strategies.defaultSelling:
        class: App\ExchangeRate\Trade\Strategies\DefaultSellingStrategy

    app.exchangeRate.trade.strategies.buyingStrategyOne:
        class: App\ExchangeRate\Trade\Strategies\BuyingStrategyOne

    app.exchangeRate.trade.strategies.sellingStrategyOne:
        class: App\ExchangeRate\Trade\Strategies\SellingStrategyOne

    app.exchangeRate.trade.tradeRateProvider:
        class: App\ExchangeRate\Trade\TradeRateModifier
        arguments:
            $buyingRateCalcStrategies: {
                USD: '@app.exchangeRate.trade.strategies.buyingStrategyOne',
                EUR: '@app.exchangeRate.trade.strategies.buyingStrategyOne',
                CZK: '@app.exchangeRate.trade.strategies.defaultBuying',
                IDR: '@app.exchangeRate.trade.strategies.defaultBuying',
                BRL: '@app.exchangeRate.trade.strategies.defaultBuying'
            }
            $sellRateCalcStrategies: {
                USD: '@app.exchangeRate.trade.strategies.sellingStrategyOne',
                EUR: '@app.exchangeRate.trade.strategies.sellingStrategyOne',
                CZK: '@app.exchangeRate.trade.strategies.defaultSelling',
                IDR: '@app.exchangeRate.trade.strategies.defaultSelling',
                BRL: '@app.exchangeRate.trade.strategies.defaultSelling'
            }

    app.exchangeRate.http.currencyExchangeNBPRestClient:
        class: App\ExchangeRate\Http\NBPRestClient
        arguments:
            $apiEndpoint: 'https://api.nbp.pl/api/exchangerates/tables/A/{DATE}?format=json'

    App\ExchangeRate\CurrencyExchangeClientFactory:
        arguments:
            $exchangeRateRequest: '@app.exchangeRate.http.currencyExchangeNBPRestClient'
            $minDate: '2023-01-01'
            $rateModifiers:
                - '@app.exchangeRate.trade.tradeRateProvider'

    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }
